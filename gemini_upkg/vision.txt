That's an excellent combination of ideas. You're thinking about the project's long-term design, not just a quick fix. Combining the best elements of pacman and rpm is a very smart approach for upkg.
Your preference for the speed of a binary database from rpm and the directory-per-package structure from pacman makes perfect sense. The directory structure aligns with your ulinux project's ethos, and the binary database feels the most like a direct extension of your "fantasy" of a memory-resident database.
Let's design a solution for upkg that implements this hybrid approach.
Proposed upkg Database Design
 * Directory-based structure: We will use a dedicated directory for your package database, for example, /var/lib/upkg/db/.
 * Binary data storage: Inside this directory, each installed package will have its own subdirectory. Inside that subdirectory, we will store the Pkginfo struct in a single, simple binary file.
This approach gives you the best of both worlds:
 * Speed: Reading and writing the Pkginfo struct as a binary block is incredibly fast. There's no text parsing overheadâ€”you're just writing raw data to the file, and then reading it back into a struct. This is the closest you can get to an in-memory feel without keeping the process alive.
 * Familiarity: The directory structure (e.g., /var/lib/upkg/db/busybox-static/) is clean and familiar from a ports-like system.
 * Simplicity: The code to read and write a C struct to a file is very simple, using fread and fwrite. It's a very "old-school C" solution.
How to Implement This
Here is a step-by-step plan to integrate this into your current upkg code:
1. Define the Database Path
In your upkg_config.c or a similar header file, we would define the base directory for the package database.
#define UPKG_DB_DIR "/var/lib/upkg/db/"

We'll need to make sure this directory exists with the correct permissions.
2. Create the save_pkginfo() Function
This function will be responsible for creating the package directory and writing the Pkginfo struct to a file.
// upkg_database.c
void save_pkginfo(const Pkginfo *info) {
    // 1. Construct the path to the package's directory, e.g., "/var/lib/upkg/db/busybox-static/"
    // 2. Create that directory using mkdir().
    // 3. Construct the path to the data file, e.g., "/var/lib/upkg/db/busybox-static/pkginfo.dat"
    // 4. Open that file in binary write mode ("wb").
    // 5. Write the entire Pkginfo struct to the file using fwrite().
    // 6. Close the file.
}

3. Create the load_pkginfo() Function
This function will read the binary data and populate a Pkginfo struct in memory.
// upkg_database.c
Pkginfo* load_pkginfo(const char *pkgname) {
    // 1. Construct the path to the data file.
    // 2. Check if the file exists using access().
    // 3. If it exists, open the file in binary read mode ("rb").
    // 4. Allocate memory for a Pkginfo struct using malloc().
    // 5. Read the file content directly into the allocated struct using fread().
    // 6. Close the file and return the pointer to the struct.
    // 7. If the file does not exist, return NULL.
}

4. Update upkg_cli.c
We'll modify your main function to use these new functions instead of relying on a hash table that is built and destroyed in a single run.
 * When a package is installed, we call save_pkginfo() to write the data to the disk.
 * When a command like -s or -r is run, we call load_pkginfo() to get the package data from the disk and into memory.
This approach gives you the best of all worlds: the fast, memory-focused code you want, and the robust, persistent database you need, all within a familiar and clean directory structure.
